generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  password   String
  name       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  role       Role        @default(CUSTOMER)
  orders     Order[]
  restaurants Restaurant[] @relation("RestaurantOwner")
  reviews    Review[]
}

model Restaurant {
  id          String     @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String
  email       String
  ownerId     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuItems   MenuItem[]
  orders      Order[]
  owner       User       @relation("RestaurantOwner", fields: [ownerId], references: [id])
  reviews     Review[]
}

model MenuItem {
  id           String      @id @default(cuid())
  name         String
  description  String?
  price        Float
  image        String?
  category     String
  restaurantId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  total        Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurantId String
  status       OrderStatus @default(PENDING)
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  menuItemId String
  updatedAt  DateTime @updatedAt
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
}

model Review {
  id           String     @id @default(cuid())
  userId       String
  restaurantId String
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  RESTAURANT_OWNER
  CUSTOMER
  DELIVERY_PERSON
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_DELIVERY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}
